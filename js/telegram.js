// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
class TelegramNotifier {
    constructor() {
        this.settings = this.loadSettings();
        this.botToken = '7778567481:AAH2wnLspwL83nFV3MfyKCQifVjBiQzmi0E';
        this.setupBot();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    loadSettings() {
        return {
            botToken: localStorage.getItem('telegram-bot-token') || '',
            chatId: localStorage.getItem('telegram-chat-id') || '',
            enabled: localStorage.getItem('telegram-notifications-enabled') === 'true'
        };
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    saveSettings(settings) {
        localStorage.setItem('telegram-bot-token', settings.botToken);
        localStorage.setItem('telegram-chat-id', settings.chatId);
        localStorage.setItem('telegram-notifications-enabled', settings.enabled);
        this.settings = settings;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    async setupBot() {
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            await this.setCommands([
                { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
                { command: 'workout', description: '–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É' },
                { command: 'website', description: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç' }
            ]);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            this.startPolling();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', error);
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    async setCommands(commands) {
        try {
            const response = await fetch(`https://api.telegram.org/bot${this.botToken}/setMyCommands`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ commands })
            });
            const data = await response.json();
            if (!data.ok) {
                throw new Error(data.description);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:', error);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    async sendMessageWithKeyboard(chatId, text, keyboard) {
        try {
            const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: chatId,
                    text: text,
                    parse_mode: 'HTML',
                    reply_markup: keyboard
                })
            });

            const data = await response.json();
            if (!data.ok) {
                throw new Error(data.description);
            }
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
    async getUpdates(offset = 0) {
        try {
            const response = await fetch(`https://api.telegram.org/bot${this.botToken}/getUpdates?offset=${offset}&timeout=30`);
            const data = await response.json();
            return data.ok ? data.result : [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
            return [];
        }
    }

    // –ó–∞–ø—É—Å–∫ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–æ–ª–ª–∏–Ω–≥–∞
    async startPolling() {
        let offset = 0;
        while (true) {
            try {
                const updates = await this.getUpdates(offset);
                for (const update of updates) {
                    if (update.message) {
                        await this.handleMessage(update.message);
                    }
                    offset = update.update_id + 1;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª–ª–∏–Ω–≥–∞:', error);
                await new Promise(resolve => setTimeout(resolve, 5000));
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async handleMessage(message) {
        const chatId = message.chat.id;
        const text = message.text;

        if (text === '/start') {
            const keyboard = {
                keyboard: [
                    [{ text: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' }],
                    [{ text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç' }]
                ],
                resize_keyboard: true
            };
            await this.sendMessageWithKeyboard(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
        } else if (text === '/workout' || text === 'üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞') {
            const workout = await this.getNextWorkout();
            if (workout) {
                await this.sendWorkoutReminder(workout);
            } else {
                await this.sendMessage('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
            }
        } else if (text === '/website' || text === 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç') {
            await this.sendMessage('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: https://bagatracker.ru');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    getNextWorkout() {
        const workouts = JSON.parse(localStorage.getItem('workouts') || '[]');
        const now = new Date();
        const activeWorkouts = workouts.filter(w => {
            if (w.completed || w.deleted) return false;
            const workoutDateTime = new Date(w.date + 'T' + (w.time || '00:00'));
            return workoutDateTime > now;
        }).sort((a, b) => {
            const dateA = new Date(a.date + 'T' + (a.time || '00:00'));
            const dateB = new Date(b.date + 'T' + (b.time || '00:00'));
            return dateA - dateB;
        });
        return activeWorkouts[0] || null;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    async sendMessage(text) {
        try {
            const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: this.settings.chatId,
                    text: text,
                    parse_mode: 'HTML'
                })
            });

            const data = await response.json();
            if (!data.ok) {
                throw new Error(data.description);
            }
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
            throw error;
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    formatWorkoutMessage(workout) {
            let message = `<b>üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${workout.name}</b>\n\n`;
            message += `<b>–¢–∏–ø:</b> ${workout.type}\n`;
            message += `<b>–î–∞—Ç–∞:</b> ${formatDate(workout.date)}\n`;
            message += `<b>–í—Ä–µ–º—è:</b> ${workout.time}\n\n`;

            if (workout.exercises && workout.exercises.length > 0) {
                message += '<b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</b>\n';
                workout.exercises.forEach((exercise, index) => {
                            message += `${index + 1}. ${exercise.name}\n`;
                            if (exercise.type === 'reps') {
                                message += `   ${exercise.sets} √ó ${exercise.reps} ${exercise.weight ? `‚Ä¢ ${exercise.weight}–∫–≥` : ''}\n`;
                } else {
                    message += `   ${exercise.duration} –º–∏–Ω\n`;
                }
            });
        }

        if (workout.notes) {
            message += `\n<b>–ó–∞–º–µ—Ç–∫–∏:</b>\n${workout.notes}`;
        }

        return message;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    async sendWorkoutReminder(workout) {
        const message = this.formatWorkoutMessage(workout);
        return this.sendMessage(message);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.telegramNotifier = new TelegramNotifier();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('telegram-settings-form');
    if (!form) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settings = window.telegramNotifier.loadSettings();
    document.getElementById('telegram-bot-token').value = settings.botToken;
    document.getElementById('telegram-chat-id').value = settings.chatId;
    document.getElementById('telegram-notifications-enabled').checked = settings.enabled;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const newSettings = {
            botToken: document.getElementById('telegram-bot-token').value.trim(),
            chatId: document.getElementById('telegram-chat-id').value.trim(),
            enabled: document.getElementById('telegram-notifications-enabled').checked
        };

        try {
            // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (newSettings.enabled && newSettings.botToken && newSettings.chatId) {
                await window.telegramNotifier.sendMessage('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            window.telegramNotifier.saveSettings(newSettings);
            showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram: ' + error.message, 'error');
        }
    });
});